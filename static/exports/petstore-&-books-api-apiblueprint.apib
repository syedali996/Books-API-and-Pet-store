FORMAT: 1A
HOST: https://api.nytimes.com/svc/books/v3

# Petstore & Books API
The Books API provides information about book reviews and The New York Times Best Sellers lists.

## Best Sellers Lists Services
### List Names
The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.

```
/lists/names.json
```

### List Data

The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.

```
/lists/2019-01-20/hardcover-fiction.json
```

Use "current" for {date} to get the latest list.
```
/lists/current/hardcover-fiction.json
```

## Book Reviews Services

The book reviews service lets you get NYT book review by author, ISBN, or title.

```
/reviews.json?author=Michelle+Obama
```

```
/reviews.json?isbn=9781524763138
```

```
/reviews.json?title=Becoming
```

## Example Calls

```
https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey
```

```
https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey
```


## Authentication
This API uses Custom Query Parameter for its authentication.

The parameters that are needed to be sent for this type of authentication are as follows:
+ `api-key`: S36VNES3R5jDxeBwfdVeWvqKUQoWem8l

# Group pet

Everything about your Pets

## Pet By PetId [/pet/{petId}]

+ Parameters
    + petId (number, required)

        ID of pet to return


### getPetById [GET]
Returns a single pet

+ Response 200 (application/json)

        successful operation

    + Attributes (Pet)



+ Response 200 (application/xml)

        successful operation

    + Attributes (Pet)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Pet not found




### updatePetWithForm [POST]
Updates a pet in the store with form data
+ Attributes
    + name (string, optional)

        Updated name of the pet

    + status (string, optional)

        Updated status of the pet


+ Request (<<Add Header Value>>)




+ Response 405 

        Invalid input




### deletePet [DELETE]
Deletes a pet

+ Request 
    + Headers

            api_key:<<Add Header Value>>





+ Response 400 

        Invalid ID supplied




+ Response 404 

        Pet not found





## Pet UploadImage By PetId [/pet/{petId}/uploadImage]

+ Parameters
    + petId (number, required)

        ID of pet to update


### uploadFile [POST]
uploads an image
+ Attributes
    + additionalMetadata (string, optional)

        Additional data to pass to server

    + file (string, optional)

        file to upload


+ Request (multipart/form-data)




+ Response 200 (application/json)

        successful operation

    + Attributes (ApiResponse)




## Pet [/pet]

### addPet [POST]
Add a new pet to the store

+ Request (<<Add Header Value>>)

    + Attributes (Pet)



+ Response 405 

        Invalid input




### updatePet [PUT]
Update an existing pet

+ Request (<<Add Header Value>>)

    + Attributes (Pet)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Pet not found




+ Response 405 

        Validation exception





## Pet FindByStatus [/pet/findByStatus{?status}]

### findPetsByStatus [GET]
Multiple status values can be provided with comma separated strings
+ Parameters
    + status (array[string], required)

        Status values that need to be considered for filter

        + Members
            + `available` 
            + `pending` 
            + `sold` 


+ Response 200 (application/json)

        successful operation

    + Attributes (array[Pet])



+ Response 200 (application/xml)

        successful operation

    + Attributes (array[Pet])



+ Response 400 

        Invalid status value





## Pet FindByTags [/pet/findByTags{?tags}]

### findPetsByTags [GET]
Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
+ Parameters
    + tags (array[string], required)

        Tags to filter by


+ Response 200 (application/json)

        successful operation

    + Attributes (array[Pet])



+ Response 200 (application/xml)

        successful operation

    + Attributes (array[Pet])



+ Response 400 

        Invalid tag value






# Group store

Access to Petstore orders

## Store Order [/store/order]

### placeOrder [POST]
Place an order for a pet

+ Request (<<Add Header Value>>)

    + Attributes (Order)



+ Response 200 (application/json)

        successful operation

    + Attributes (Order)



+ Response 200 (application/xml)

        successful operation

    + Attributes (Order)



+ Response 400 

        Invalid Order





## Store Order By OrderId [/store/order/{orderId}]

+ Parameters
    + orderId (number, required)

        ID of pet that needs to be fetched


### getOrderById [GET]
For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions

+ Response 200 (application/json)

        successful operation

    + Attributes (Order)



+ Response 200 (application/xml)

        successful operation

    + Attributes (Order)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Order not found




### deleteOrder [DELETE]
For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors

+ Response 400 

        Invalid ID supplied




+ Response 404 

        Order not found





## Store Inventory [/store/inventory]

### getInventory [GET]
Returns a map of status codes to quantities

+ Response 200 (application/json)

        successful operation

    + Attributes (number)





# Group user

Operations about user

## User By Username [/user/{username}]

+ Parameters
    + username (string, required)

        The name that needs to be fetched. Use user1 for testing.


### getUserByName [GET]
Get user by user name

+ Response 200 (application/json)

        successful operation

    + Attributes (User)



+ Response 200 (application/xml)

        successful operation

    + Attributes (User)



+ Response 400 

        Invalid username supplied




+ Response 404 

        User not found




### updateUser [PUT]
This can only be done by the logged in user.

+ Request (<<Add Header Value>>)

    + Attributes (User)



+ Response 400 

        Invalid user supplied




+ Response 404 

        User not found




### deleteUser [DELETE]
This can only be done by the logged in user.

+ Response 400 

        Invalid username supplied




+ Response 404 

        User not found





## User Login [/user/login{?username,password}]

### loginUser [GET]
Logs user into the system
+ Parameters
    + username (string, required)

        The user name for login

    + password (string, required)

        The password for login in clear text


+ Response 200 (application/json)

        successful operation

    + Attributes (string)



+ Response 200 (application/xml)

        successful operation

    + Attributes (string)



+ Response 400 

        Invalid username/password supplied





## User Logout [/user/logout]

### logoutUser [GET]
Logs out current logged in user session


## User CreateWithArray [/user/createWithArray]

### createUsersWithArrayInput [POST]
Creates list of users with given input array

+ Request (<<Add Header Value>>)

    + Attributes (array[User])




## User CreateWithList [/user/createWithList]

### createUsersWithListInput [POST]
Creates list of users with given input array

+ Request (<<Add Header Value>>)

    + Attributes (array[User])




## User [/user]

### createUser [POST]
This can only be done by the logged in user.

+ Request (<<Add Header Value>>)

    + Attributes (User)





# ListsJson [/lists.json{?list,bestsellers-date,published-date,offset}]

## GETlistsformat [GET]
Get Best Sellers list.  If no date is provided returns the latest list.
+ Parameters
    + list (string, optional) -

        The name of the Times best sellers list (hardcover-fiction, paperback-nonfiction, ...).
        The /lists/names service returns all the list names.
        The encoded list names are lower case with hyphens instead of spaces (e.g. e-book-fiction, instead of E-Book Fiction).

        + Default: hardcover-fiction
    + bestsellers-date (string, optional)

        YYYY-MM-DD
        
        The week-ending date for the sales reflected on list-name. Times best sellers lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).

    + published-date (string, optional)

        YYYY-MM-DD
        
        The date the best sellers list was published on NYTimes.com (different than bestsellers-date).  Use "current" for latest list.

    + offset (number, optional)

        Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Best Sellers list books

    + Attributes (GETlistsformatResponse)


    + Body

            {"status":"OK","copyright":"Copyright (c) 2019 The New York Times Company.  All Rights Reserved.","num_results":1,"last_modified":"2016-03-11T13:09:01-05:00","results":[{"list_name":"Hardcover Fiction","display_name":"Hardcover Fiction","bestsellers_date":"2016-03-05","published_date":"2016-03-20","rank":5,"rank_last_week":2,"weeks_on_list":2,"asterisk":0,"dagger":0,"amazon_product_url":"http://www.amazon.com/Girls-Guide-Moving-On-Novel-ebook/dp/B00ZNE17B4?tag=thenewyorktim-20","isbns":[{"isbn10":"0553391925","isbn13":"9780553391923"}],"book_details":[{"title":"A GIRL'S GUIDE TO MOVING ON","description":"A mother and her daughter-in-law both leave unhappy marriages and take up with new men.","contributor":"by Debbie Macomber","author":"Debbie Macomber","contributor_note":"","price":0,"age_group":"","publisher":"Ballantine","primary_isbn13":"9780553391923","primary_isbn10":"0553391925"}],"reviews":[{"book_review_link":"","first_chapter_link":"","sunday_review_link":"","article_chapter_link":""}]}]}



# Lists Json By Date And List [/lists/{date}/{list}.json{?offset}]

+ Parameters
    + date (string, required)

        YYYY-MM-DD or "current"
        
        The date the best sellers list was published on NYTimes.com.  Use "current" to get latest list.

    + list (string, required)

        Name of the Best Sellers List (e.g. hardcover-fiction). You can get the full list of names from the /lists/names.json service.


## GETlistsdatelistjson [GET]
Get Best Sellers list by date.
+ Parameters
    + offset (number, optional)

        Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Best Sellers list books.

    + Attributes (GETlistsdatelistjsonResponse)


    + Body

            {"status":"OK","copyright":"Copyright (c) 2019 The New York Times Company.  All Rights Reserved.","num_results":15,"last_modified":"2015-12-25T13:05:20-05:00","results":{"list_name":"Trade Fiction Paperback","bestsellers_date":"2015-12-19","published_date":"2016-01-03","display_name":"Paperback Trade Fiction","normal_list_ends_at":10,"updated":"WEEKLY","books":[{"rank":1,"rank_last_week":0,"weeks_on_list":60,"asterisk":0,"dagger":0,"primary_isbn10":"0553418025","primary_isbn13":"9780553418026","publisher":"Broadway","description":"Separated from his crew, an astronaut embarks on a quest to stay alive on Mars. The basis of the movie.","price":0,"title":"THE MARTIAN","author":"Andy Weir","contributor":"by Andy Weir","contributor_note":"","book_image":"http://du.ec2.nytimes.com.s3.amazonaws.com/prd/books/9780804139038.jpg","amazon_product_url":"http://www.amazon.com/The-Martian-Novel-Andy-Weir-ebook/dp/B00EMXBDMA?tag=thenewyorktim-20","age_group":"","book_review_link":"","first_chapter_link":"","sunday_review_link":"","article_chapter_link":"","isbns":[{"isbn10":"0804139024","isbn13":"9780804139021"}]}],"corrections":[]}}



# Lists Full OverviewJson [/lists/full-overview.json{?published_date}]

## GETlistsfulloverviewformat [GET]
Get all books for all the Best Sellers lists for specified date.
+ Parameters
    + published_date (string, optional)

        YYYY-MM-DD
        
        The best-seller list publication date.
        You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.
        
        If you do not include a published date, the current week's best sellers lists will be returned.


+ Response 200 (application/json)

        Full overview of Best Sellers lists.

    + Attributes (OverviewResponse)




# Lists OverviewJson [/lists/overview.json{?published_date}]

## GETlistsoverviewformat [GET]
Get top 5 books for all the Best Sellers lists for specified date.
+ Parameters
    + published_date (string, optional)

        YYYY-MM-DD
        
        The best-seller list publication date.
        You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.
        
        If you do not include a published date, the current week's best sellers lists will be returned.


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Overview of Best Sellers lists.

    + Attributes (OverviewResponse)


    + Body

            {"status":"OK","copyright":"Copyright (c) 2019 The New York Times Company.  All Rights Reserved.","num_results":210,"results":{"bestsellers_date":"2016-03-05","published_date":"2016-03-20","lists":[{"list_id":704,"list_name":"Combined Print and E-Book Fiction","display_name":"Combined Print & E-Book Fiction","updated":"WEEKLY","list_image":"http://du.ec2.nytimes.com.s3.amazonaws.com/prd/books/9780399175954.jpg","books":[{"age_group":"","author":"Clive Cussler and Justin Scott","contributor":"by Clive Cussler and Justin Scott","contributor_note":"","created_date":"2016-03-10 12:00:22","description":"In the ninth book in this series, set in 1906, the New York detective Isaac Bell contends with a crime boss passing as a respectable businessman and a tycoon’s plot against President Theodore Roosevelt.","price":0,"primary_isbn13":"9780698406421","primary_isbn10":"0698406427","publisher":"Putnam","rank":1,"title":"THE GANGSTER","updated_date":"2016-03-10 17:00:21"}]}]}}



# Lists NamesJson [/lists/names.json]

## GETlistsnamesformat [GET]
Get Best Sellers list names.

+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Get Best Sellers list names.

    + Attributes (GETlistsnamesformatResponse)


    + Body

            {"status":"OK","copyright":"Copyright (c) 2019 The New York Times Company.  All Rights Reserved.","num_results":53,"results":[{"list_name":"Combined Print and E-Book Fiction","display_name":"Combined Print & E-Book Fiction","list_name_encoded":"combined-print-and-e-book-fiction","oldest_published_date":"2011-02-13","newest_published_date":"2016-03-20","updated":"WEEKLY"}]}



# Lists Best Sellers HistoryJson [/lists/best-sellers/history.json{?age-group,author,contributor,isbn,offset,price,publisher,title}]

## GETlistsbestsellershistoryjson [GET]
Get Best Sellers list history.
+ Parameters
    + age-group (string, optional)

        The target age group for the best seller.

    + author (string, optional)

        The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).
        
        When searching the author field, you can specify any combination of first, middle and last names.
        
        When sort-by is set to author, the results will be sorted by author's first name.

    + contributor (string, optional)

        The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).
        
        When searching, you can specify any combination of first, middle and last names of any of the contributors.
        
        When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.

    + isbn (string, optional)

        International Standard Book Number, 10 or 13 digits
        
        A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229).

    + offset (number, optional)

        Sets the starting point of the result set (0, 20, ...).  Used to paginate thru results if there are more than 20. Defaults to 0. The num_results field indicates how many results there are total.

    + price (string, optional)

        The publisher's list price of the best seller, including decimal point.

    + publisher (string, optional)

        The standardized name of the publisher

    + title (string, optional)

        The title of the best seller
        
        When searching, you can specify a portion of a title or a full title.


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Best Sellers list history

    + Attributes (GETlistsbestsellershistoryjsonResponse)


    + Body

            {"status":"OK","copyright":"Copyright (c) 2019 The New York Times Company.  All Rights Reserved.","num_results":28970,"results":[{"title":"#GIRLBOSS","description":"An online fashion retailer traces her path to success.","contributor":"by Sophia Amoruso","author":"Sophia Amoruso","contributor_note":"","price":0,"age_group":"","publisher":"Portfolio/Penguin/Putnam","isbns":[{"isbn10":"039916927X","isbn13":"9780399169274"}],"ranks_history":[{"primary_isbn10":"1591847931","primary_isbn13":"9781591847939","rank":8,"list_name":"Business Books","display_name":"Business","published_date":"2016-03-13","bestsellers_date":"2016-02-27","weeks_on_list":0,"ranks_last_week":null,"asterisk":0,"dagger":0}],"reviews":[{"book_review_link":"","first_chapter_link":"","sunday_review_link":"","article_chapter_link":""}]}]}



# ReviewsJson [/reviews.json{?isbn,title,author}]

## GETreviewsformat [GET]
Get book reviews.
+ Parameters
    + isbn (number, optional)

        Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs.

    + title (string, optional)

        You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20.

    + author (string, optional)

        You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20.


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Book reviews.

    + Attributes (GETreviewsformatResponse)


    + Body

            {"status":"OK","copyright":"Copyright (c) 2019 The New York Times Company.  All Rights Reserved.","num_results":2,"results":[{"url":"http://www.nytimes.com/2011/11/10/books/1q84-by-haruki-murakami-review.html","publication_dt":"2011-11-10","byline":"JANET MASLIN","book_title":"1Q84","book_author":"Haruki Murakami","summary":"In “1Q84,” the Japanese novelist Haruki Murakami writes about characters in a Tokyo with two moons.","isbn13":["9780307476463"]}]}



# Data Structures

## OverviewResponse (object)


### Properties
+ `status` (string, optional) 
+ `copyright` (string, optional) 
+ `num_results` (number, optional) 
+ `results` (Results, optional) 


## Book (object)


### Properties
+ `age_group` (string, optional) 
+ `author` (string, optional) 
+ `contributor` (string, optional) 
+ `contributor_note` (string, optional) 
+ `created_date` (string, optional) 
+ `description` (string, optional) 
+ `price` (number, optional) 
+ `primary_isbn13` (string, optional) 
+ `primary_isbn10` (string, optional) 
+ `publisher` (string, optional) 
+ `rank` (number, optional) 
+ `title` (string, optional) 
+ `updated_date` (string, optional) 


## Book1 (object)


### Properties
+ `rank` (number, optional) 
+ `rank_last_week` (number, optional) 
+ `weeks_on_list` (number, optional) 
+ `asterisk` (number, optional) 
+ `dagger` (number, optional) 
+ `primary_isbn10` (string, optional) 
+ `primary_isbn13` (string, optional) 
+ `publisher` (string, optional) 
+ `description` (string, optional) 
+ `price` (number, optional) 
+ `title` (string, optional) 
+ `author` (string, optional) 
+ `contributor` (string, optional) 
+ `contributor_note` (string, optional) 
+ `book_image` (string, optional) 
+ `amazon_product_url` (string, optional) 
+ `age_group` (string, optional) 
+ `book_review_link` (string, optional) 
+ `first_chapter_link` (string, optional) 
+ `sunday_review_link` (string, optional) 
+ `article_chapter_link` (string, optional) 
+ `isbns` (array[Isbn], optional) 


## BookDetail (object)


### Properties
+ `title` (string, optional) 
+ `description` (string, optional) 
+ `contributor` (string, optional) 
+ `author` (string, optional) 
+ `contributor_note` (string, optional) 
+ `price` (number, optional) 
+ `age_group` (string, optional) 
+ `publisher` (string, optional) 
+ `primary_isbn13` (string, optional) 
+ `primary_isbn10` (string, optional) 


## GETlistsbestsellershistoryjsonResponse (object)


### Properties
+ `status` (string, optional) 
+ `copyright` (string, optional) 
+ `num_results` (number, optional) 
+ `results` (array[Results4], optional) 


## GETlistsdatelistjsonResponse (object)


### Properties
+ `status` (string, optional) 
+ `copyright` (string, optional) 
+ `num_results` (number, optional) 
+ `last_modified` (string, optional) 
+ `results` (Results2, optional) 


## GETlistsformatResponse (object)


### Properties
+ `status` (string, optional) 
+ `copyright` (string, optional) 
+ `num_results` (number, optional) 
+ `last_modified` (string, optional) 
+ `results` (array[Results1], optional) 


## GETlistsnamesformatResponse (object)


### Properties
+ `status` (string, optional) 
+ `copyright` (string, optional) 
+ `num_results` (number, optional) 
+ `results` (array[Results3], optional) 


## GETreviewsformatResponse (object)


### Properties
+ `status` (string, optional) 
+ `copyright` (string, optional) 
+ `num_results` (number, optional) 
+ `results` (array[Results5], optional) 


## Isbn (object)


### Properties
+ `isbn10` (string, optional) 
+ `isbn13` (string, optional) 


## List (object)


### Properties
+ `list_id` (number, optional) 
+ `list_name` (string, optional) 
+ `display_name` (string, optional) 
+ `updated` (string, optional) 
+ `list_image` (string, optional) 
+ `books` (array[Book], optional) 


## RanksHistory (object)


### Properties
+ `primary_isbn10` (string, optional) 
+ `primary_isbn13` (string, optional) 
+ `rank` (number, optional) 
+ `list_name` (string, optional) 
+ `display_name` (string, optional) 
+ `published_date` (string, optional) 
+ `bestsellers_date` (string, optional) 
+ `weeks_on_list` (number, optional) 
+ `ranks_last_week` (string, optional, nullable) 
+ `asterisk` (number, optional) 
+ `dagger` (number, optional) 


## Results (object)


### Properties
+ `bestsellers_date` (string, optional) 
+ `published_date` (string, optional) 
+ `lists` (array[List], optional) 


## Results1 (object)


### Properties
+ `list_name` (string, optional) 
+ `display_name` (string, optional) 
+ `bestsellers_date` (string, optional) 
+ `published_date` (string, optional) 
+ `rank` (number, optional) 
+ `rank_last_week` (number, optional) 
+ `weeks_on_list` (number, optional) 
+ `asterisk` (number, optional) 
+ `dagger` (number, optional) 
+ `amazon_product_url` (string, optional) 
+ `isbns` (array[Isbn], optional) 
+ `book_details` (array[BookDetail], optional) 
+ `reviews` (array[Review], optional) 


## Results2 (object)


### Properties
+ `list_name` (string, optional) 
+ `bestsellers_date` (string, optional) 
+ `published_date` (string, optional) 
+ `display_name` (string, optional) 
+ `normal_list_ends_at` (number, optional) 
+ `updated` (string, optional) 
+ `books` (array[Book1], optional) 
+ `corrections` (array[object], optional) 


## Results3 (object)


### Properties
+ `list_name` (string, optional) 
+ `display_name` (string, optional) 
+ `list_name_encoded` (string, optional) 
+ `oldest_published_date` (string, optional) 
+ `newest_published_date` (string, optional) 
+ `updated` (enum[string], optional) 
    + `WEEKLY`
    + `MONTHLY`


## Results4 (object)


### Properties
+ `title` (string, optional) 
+ `description` (string, optional) 
+ `contributor` (string, optional) 
+ `author` (string, optional) 
+ `contributor_note` (string, optional) 
+ `price` (number, optional) 
+ `age_group` (string, optional) 
+ `publisher` (string, optional) 
+ `isbns` (array[Isbn], optional) 
+ `ranks_history` (array[RanksHistory], optional) 
+ `reviews` (array[Review], optional) 


## Results5 (object)


### Properties
+ `url` (string, optional) 
+ `publication_dt` (string, optional) 
+ `byline` (string, optional) 
+ `book_title` (string, optional) 
+ `book_author` (string, optional) 
+ `summary` (string, optional) 
+ `isbn13` (array[string], optional) 


## Review (object)


### Properties
+ `book_review_link` (string, optional) 
+ `first_chapter_link` (string, optional) 
+ `sunday_review_link` (string, optional) 
+ `article_chapter_link` (string, optional) 


## Category (object)


### Properties
+ `id` (number, optional) 
+ `name` (string, optional) 


## Pet (object)


### Properties
+ `id` (number, optional) 
+ `category` (Category, optional) 
+ `name` (string, required) 
+ `photoUrls` (array[string], required) 
+ `tags` (array[Tag], optional) 
+ `status` (enum[string], optional) - pet status in the store
    + `available`
    + `pending`
    + `sold`


## Tag (object)


### Properties
+ `id` (number, optional) 
+ `name` (string, optional) 


## ApiResponse (object)


### Properties
+ `code` (number, optional) 
+ `type` (string, optional) 
+ `message` (string, optional) 


## Order (object)


### Properties
+ `id` (number, optional) 
+ `petId` (number, optional) 
+ `quantity` (number, optional) 
+ `shipDate` (string, optional) 
+ `status` (enum[string], optional) - Order Status
    + `placed`
    + `approved`
    + `delivered`
+ `complete` (boolean, optional) 


## User (object)


### Properties
+ `id` (number, optional) 
+ `username` (string, optional) 
+ `firstName` (string, optional) 
+ `lastName` (string, optional) 
+ `email` (string, optional) 
+ `password` (string, optional) 
+ `phone` (string, optional) 
+ `userStatus` (number, optional) - User Status

