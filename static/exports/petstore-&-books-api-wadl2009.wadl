<?xml version="1.0" encoding="utf-8"?>
<application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:schemas="https://api.nytimes.com/svc/books/v3/schemas" xmlns="http://wadl.dev.java.net/2009/02">
  <doc title="Petstore &amp; Books API" xml:lang="en">The Books API provides information about book reviews and The New York Times Best Sellers lists.

## Best Sellers Lists Services
### List Names
The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.

```
/lists/names.json
```

### List Data

The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.

```
/lists/2019-01-20/hardcover-fiction.json
```

Use "current" for {date} to get the latest list.
```
/lists/current/hardcover-fiction.json
```

## Book Reviews Services

The book reviews service lets you get NYT book review by author, ISBN, or title.

```
/reviews.json?author=Michelle+Obama
```

```
/reviews.json?isbn=9781524763138
```

```
/reviews.json?title=Becoming
```

## Example Calls

```
https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey
```

```
https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&amp;api-key=yourkey
```
</doc>
  <grammars>
    <xs:schema xmlns:tns="https://api.nytimes.com/svc/books/v3/schemas" targetNamespace="https://api.nytimes.com/svc/books/v3/schemas" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="OverviewResponse" type="schemas:OverviewResponse" />
      <xs:element name="Book" type="schemas:Book" />
      <xs:element name="Book1" type="schemas:Book1" />
      <xs:element name="BookDetail" type="schemas:BookDetail" />
      <xs:element name="GET_lists-best-sellers-history-jsonResponse" type="schemas:GET_lists-best-sellers-history-jsonResponse" />
      <xs:element name="GET_lists-date-list-jsonResponse" type="schemas:GET_lists-date-list-jsonResponse" />
      <xs:element name="GET_lists-formatResponse" type="schemas:GET_lists-formatResponse" />
      <xs:element name="GET_lists-names-formatResponse" type="schemas:GET_lists-names-formatResponse" />
      <xs:element name="GET_reviews-formatResponse" type="schemas:GET_reviews-formatResponse" />
      <xs:element name="Isbn" type="schemas:Isbn" />
      <xs:element name="List" type="schemas:List" />
      <xs:element name="RanksHistory" type="schemas:RanksHistory" />
      <xs:element name="Results" type="schemas:Results" />
      <xs:element name="Results1" type="schemas:Results1" />
      <xs:element name="Results2" type="schemas:Results2" />
      <xs:element name="Results3" type="schemas:Results3" />
      <xs:element name="Results4" type="schemas:Results4" />
      <xs:element name="Results5" type="schemas:Results5" />
      <xs:element name="Review" type="schemas:Review" />
      <xs:element name="Updated" type="schemas:Updated" />
      <xs:element name="Category" type="schemas:Category" />
      <xs:element name="Pet" type="schemas:Pet" />
      <xs:element name="Tag" type="schemas:Tag" />
      <xs:element name="ApiResponse" type="schemas:ApiResponse" />
      <xs:element name="Order" type="schemas:Order" />
      <xs:element name="User" type="schemas:User" />
      <xs:element name="Status" type="schemas:Status" />
      <xs:element name="Status1" type="schemas:Status1" />
      <xs:element name="status2" type="schemas:status2" />
      <xs:element name="getPetById200_Response0" type="schemas:getPetById200_Response0" />
      <xs:element name="getPetById200_Response1" type="schemas:getPetById200_Response1" />
      <xs:element name="uploadFile200_Response0" type="schemas:uploadFile200_Response0" />
      <xs:element name="addPet_Request" type="schemas:addPet_Request" />
      <xs:element name="updatePet_Request" type="schemas:updatePet_Request" />
      <xs:element name="findPetsByStatus200_Response0" type="schemas:findPetsByStatus200_Response0" />
      <xs:element name="findPetsByStatus200_Response1" type="schemas:findPetsByStatus200_Response1" />
      <xs:element name="findPetsByTags200_Response0" type="schemas:findPetsByTags200_Response0" />
      <xs:element name="findPetsByTags200_Response1" type="schemas:findPetsByTags200_Response1" />
      <xs:element name="placeOrder_Request" type="schemas:placeOrder_Request" />
      <xs:element name="placeOrder200_Response0" type="schemas:placeOrder200_Response0" />
      <xs:element name="placeOrder200_Response1" type="schemas:placeOrder200_Response1" />
      <xs:element name="getOrderById200_Response0" type="schemas:getOrderById200_Response0" />
      <xs:element name="getOrderById200_Response1" type="schemas:getOrderById200_Response1" />
      <xs:element name="getInventory200_Response0" type="schemas:getInventory200_Response0" />
      <xs:element name="getUserByName200_Response0" type="schemas:getUserByName200_Response0" />
      <xs:element name="getUserByName200_Response1" type="schemas:getUserByName200_Response1" />
      <xs:element name="updateUser_Request" type="schemas:updateUser_Request" />
      <xs:element name="response" type="xs:string">
        <xs:annotation>
          <xs:documentation>successful operation</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="response1" type="xs:string">
        <xs:annotation>
          <xs:documentation>successful operation</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="createUsersWithArrayInput_Request" type="schemas:createUsersWithArrayInput_Request" />
      <xs:element name="createUsersWithListInput_Request" type="schemas:createUsersWithListInput_Request" />
      <xs:element name="createUser_Request" type="schemas:createUser_Request" />
      <xs:element name="GET_lists-format200_Response0" type="schemas:GET_lists-format200_Response0" />
      <xs:element name="GET_lists-date-list-json200_Response0" type="schemas:GET_lists-date-list-json200_Response0" />
      <xs:element name="GET_lists-full-overview-format200_Response0" type="schemas:GET_lists-full-overview-format200_Response0" />
      <xs:element name="GET_lists-overview-format200_Response0" type="schemas:GET_lists-overview-format200_Response0" />
      <xs:element name="GET_lists-names-format200_Response0" type="schemas:GET_lists-names-format200_Response0" />
      <xs:element name="GET_lists-best-sellers-history-json200_Response0" type="schemas:GET_lists-best-sellers-history-json200_Response0" />
      <xs:element name="GET_reviews-format200_Response0" type="schemas:GET_reviews-format200_Response0" />
      <xs:complexType name="OverviewResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="status" type="xs:string" />
          <xs:element minOccurs="0" name="copyright" type="xs:string" />
          <xs:element minOccurs="0" name="num_results" type="xs:integer" />
          <xs:element minOccurs="0" name="results" type="schemas:Results" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Book">
        <xs:sequence>
          <xs:element minOccurs="0" name="age_group" type="xs:string" />
          <xs:element minOccurs="0" name="author" type="xs:string" />
          <xs:element minOccurs="0" name="contributor" type="xs:string" />
          <xs:element minOccurs="0" name="contributor_note" type="xs:string" />
          <xs:element minOccurs="0" name="created_date" type="xs:string" />
          <xs:element minOccurs="0" name="description" type="xs:string" />
          <xs:element minOccurs="0" name="price" type="xs:integer" />
          <xs:element minOccurs="0" name="primary_isbn13" type="xs:string" />
          <xs:element minOccurs="0" name="primary_isbn10" type="xs:string" />
          <xs:element minOccurs="0" name="publisher" type="xs:string" />
          <xs:element minOccurs="0" name="rank" type="xs:integer" />
          <xs:element minOccurs="0" name="title" type="xs:string" />
          <xs:element minOccurs="0" name="updated_date" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Book1">
        <xs:sequence>
          <xs:element minOccurs="0" name="rank" type="xs:integer" />
          <xs:element minOccurs="0" name="rank_last_week" type="xs:integer" />
          <xs:element minOccurs="0" name="weeks_on_list" type="xs:integer" />
          <xs:element minOccurs="0" name="asterisk" type="xs:integer" />
          <xs:element minOccurs="0" name="dagger" type="xs:integer" />
          <xs:element minOccurs="0" name="primary_isbn10" type="xs:string" />
          <xs:element minOccurs="0" name="primary_isbn13" type="xs:string" />
          <xs:element minOccurs="0" name="publisher" type="xs:string" />
          <xs:element minOccurs="0" name="description" type="xs:string" />
          <xs:element minOccurs="0" name="price" type="xs:integer" />
          <xs:element minOccurs="0" name="title" type="xs:string" />
          <xs:element minOccurs="0" name="author" type="xs:string" />
          <xs:element minOccurs="0" name="contributor" type="xs:string" />
          <xs:element minOccurs="0" name="contributor_note" type="xs:string" />
          <xs:element minOccurs="0" name="book_image" type="xs:string" />
          <xs:element minOccurs="0" name="amazon_product_url" type="xs:string" />
          <xs:element minOccurs="0" name="age_group" type="xs:string" />
          <xs:element minOccurs="0" name="book_review_link" type="xs:string" />
          <xs:element minOccurs="0" name="first_chapter_link" type="xs:string" />
          <xs:element minOccurs="0" name="sunday_review_link" type="xs:string" />
          <xs:element minOccurs="0" name="article_chapter_link" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="isbns" type="schemas:Isbn" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BookDetail">
        <xs:sequence>
          <xs:element minOccurs="0" name="title" type="xs:string" />
          <xs:element minOccurs="0" name="description" type="xs:string" />
          <xs:element minOccurs="0" name="contributor" type="xs:string" />
          <xs:element minOccurs="0" name="author" type="xs:string" />
          <xs:element minOccurs="0" name="contributor_note" type="xs:string" />
          <xs:element minOccurs="0" name="price" type="xs:integer" />
          <xs:element minOccurs="0" name="age_group" type="xs:string" />
          <xs:element minOccurs="0" name="publisher" type="xs:string" />
          <xs:element minOccurs="0" name="primary_isbn13" type="xs:string" />
          <xs:element minOccurs="0" name="primary_isbn10" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-best-sellers-history-jsonResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="status" type="xs:string" />
          <xs:element minOccurs="0" name="copyright" type="xs:string" />
          <xs:element minOccurs="0" name="num_results" type="xs:integer" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="results" type="schemas:Results4" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-date-list-jsonResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="status" type="xs:string" />
          <xs:element minOccurs="0" name="copyright" type="xs:string" />
          <xs:element minOccurs="0" name="num_results" type="xs:integer" />
          <xs:element minOccurs="0" name="last_modified" type="xs:string" />
          <xs:element minOccurs="0" name="results" type="schemas:Results2" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-formatResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="status" type="xs:string" />
          <xs:element minOccurs="0" name="copyright" type="xs:string" />
          <xs:element minOccurs="0" name="num_results" type="xs:integer" />
          <xs:element minOccurs="0" name="last_modified" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="results" type="schemas:Results1" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-names-formatResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="status" type="xs:string" />
          <xs:element minOccurs="0" name="copyright" type="xs:string" />
          <xs:element minOccurs="0" name="num_results" type="xs:integer" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="results" type="schemas:Results3" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_reviews-formatResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="status" type="xs:string" />
          <xs:element minOccurs="0" name="copyright" type="xs:string" />
          <xs:element minOccurs="0" name="num_results" type="xs:integer" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="results" type="schemas:Results5" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Isbn">
        <xs:sequence>
          <xs:element minOccurs="0" name="isbn10" type="xs:string" />
          <xs:element minOccurs="0" name="isbn13" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="List">
        <xs:sequence>
          <xs:element minOccurs="0" name="list_id" type="xs:integer" />
          <xs:element minOccurs="0" name="list_name" type="xs:string" />
          <xs:element minOccurs="0" name="display_name" type="xs:string" />
          <xs:element minOccurs="0" name="updated" type="xs:string" />
          <xs:element minOccurs="0" name="list_image" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="books" type="schemas:Book" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RanksHistory">
        <xs:sequence>
          <xs:element minOccurs="0" name="primary_isbn10" type="xs:string" />
          <xs:element minOccurs="0" name="primary_isbn13" type="xs:string" />
          <xs:element minOccurs="0" name="rank" type="xs:integer" />
          <xs:element minOccurs="0" name="list_name" type="xs:string" />
          <xs:element minOccurs="0" name="display_name" type="xs:string" />
          <xs:element minOccurs="0" name="published_date" type="xs:string" />
          <xs:element minOccurs="0" name="bestsellers_date" type="xs:string" />
          <xs:element minOccurs="0" name="weeks_on_list" type="xs:integer" />
          <xs:element minOccurs="0" name="ranks_last_week" nillable="true" type="xs:string" />
          <xs:element minOccurs="0" name="asterisk" type="xs:integer" />
          <xs:element minOccurs="0" name="dagger" type="xs:integer" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Results">
        <xs:sequence>
          <xs:element minOccurs="0" name="bestsellers_date" type="xs:string" />
          <xs:element minOccurs="0" name="published_date" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="lists" type="schemas:List" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Results1">
        <xs:sequence>
          <xs:element minOccurs="0" name="list_name" type="xs:string" />
          <xs:element minOccurs="0" name="display_name" type="xs:string" />
          <xs:element minOccurs="0" name="bestsellers_date" type="xs:string" />
          <xs:element minOccurs="0" name="published_date" type="xs:string" />
          <xs:element minOccurs="0" name="rank" type="xs:integer" />
          <xs:element minOccurs="0" name="rank_last_week" type="xs:integer" />
          <xs:element minOccurs="0" name="weeks_on_list" type="xs:integer" />
          <xs:element minOccurs="0" name="asterisk" type="xs:integer" />
          <xs:element minOccurs="0" name="dagger" type="xs:integer" />
          <xs:element minOccurs="0" name="amazon_product_url" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="isbns" type="schemas:Isbn" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="book_details" type="schemas:BookDetail" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="reviews" type="schemas:Review" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Results2">
        <xs:sequence>
          <xs:element minOccurs="0" name="list_name" type="xs:string" />
          <xs:element minOccurs="0" name="bestsellers_date" type="xs:string" />
          <xs:element minOccurs="0" name="published_date" type="xs:string" />
          <xs:element minOccurs="0" name="display_name" type="xs:string" />
          <xs:element minOccurs="0" name="normal_list_ends_at" type="xs:integer" />
          <xs:element minOccurs="0" name="updated" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="books" type="schemas:Book1" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="corrections">
            <xs:complexType>
              <xs:sequence>
                <xs:any />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Results3">
        <xs:sequence>
          <xs:element minOccurs="0" name="list_name" type="xs:string" />
          <xs:element minOccurs="0" name="display_name" type="xs:string" />
          <xs:element minOccurs="0" name="list_name_encoded" type="xs:string" />
          <xs:element minOccurs="0" name="oldest_published_date" type="xs:string" />
          <xs:element minOccurs="0" name="newest_published_date" type="xs:string" />
          <xs:element minOccurs="0" name="updated" type="schemas:Updated" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Results4">
        <xs:sequence>
          <xs:element minOccurs="0" name="title" type="xs:string" />
          <xs:element minOccurs="0" name="description" type="xs:string" />
          <xs:element minOccurs="0" name="contributor" type="xs:string" />
          <xs:element minOccurs="0" name="author" type="xs:string" />
          <xs:element minOccurs="0" name="contributor_note" type="xs:string" />
          <xs:element minOccurs="0" name="price" type="xs:integer" />
          <xs:element minOccurs="0" name="age_group" type="xs:string" />
          <xs:element minOccurs="0" name="publisher" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="isbns" type="schemas:Isbn" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="ranks_history" type="schemas:RanksHistory" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="reviews" type="schemas:Review" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Results5">
        <xs:sequence>
          <xs:element minOccurs="0" name="url" type="xs:string" />
          <xs:element minOccurs="0" name="publication_dt" type="xs:string" />
          <xs:element minOccurs="0" name="byline" type="xs:string" />
          <xs:element minOccurs="0" name="book_title" type="xs:string" />
          <xs:element minOccurs="0" name="book_author" type="xs:string" />
          <xs:element minOccurs="0" name="summary" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="isbn13" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Review">
        <xs:sequence>
          <xs:element minOccurs="0" name="book_review_link" type="xs:string" />
          <xs:element minOccurs="0" name="first_chapter_link" type="xs:string" />
          <xs:element minOccurs="0" name="sunday_review_link" type="xs:string" />
          <xs:element minOccurs="0" name="article_chapter_link" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="Updated">
        <xs:restriction base="xs:string">
          <xs:enumeration value="WEEKLY" />
          <xs:enumeration value="MONTHLY" />
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="Category">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="name" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Pet">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="Category" type="schemas:Category" />
          <xs:element minOccurs="1" name="name" type="xs:string" />
          <xs:element name="photoUrl">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="1" maxOccurs="unbounded" name="photoUrl" type="xs:string" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="tags">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" name="tags" type="schemas:Tag" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="status" type="schemas:Status">
            <xs:annotation>
              <xs:documentation>pet status in the store</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Tag">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="name" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ApiResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="code" type="xs:integer" />
          <xs:element minOccurs="0" name="type" type="xs:string" />
          <xs:element minOccurs="0" name="message" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Order">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="petId" type="xs:long" />
          <xs:element minOccurs="0" name="quantity" type="xs:integer" />
          <xs:element minOccurs="0" name="shipDate" type="xs:dateTime" />
          <xs:element minOccurs="0" name="status" type="schemas:Status1">
            <xs:annotation>
              <xs:documentation>Order Status</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="complete" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="User">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long" />
          <xs:element minOccurs="0" name="username" type="xs:string" />
          <xs:element minOccurs="0" name="firstName" type="xs:string" />
          <xs:element minOccurs="0" name="lastName" type="xs:string" />
          <xs:element minOccurs="0" name="email" type="xs:string" />
          <xs:element minOccurs="0" name="password" type="xs:string" />
          <xs:element minOccurs="0" name="phone" type="xs:string" />
          <xs:element minOccurs="0" name="userStatus" type="xs:integer">
            <xs:annotation>
              <xs:documentation>User Status</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="Status">
        <xs:annotation>
          <xs:documentation>pet status in the store</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="available" />
          <xs:enumeration value="pending" />
          <xs:enumeration value="sold" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Status1">
        <xs:annotation>
          <xs:documentation>Order Status</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="placed" />
          <xs:enumeration value="approved" />
          <xs:enumeration value="delivered" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="status2">
        <xs:restriction base="xs:string">
          <xs:enumeration value="available" />
          <xs:enumeration value="pending" />
          <xs:enumeration value="sold" />
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="getPetById200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPetById200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="Pet" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="uploadFile200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:ApiResponse">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addPet_Request">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>Pet object that needs to be added to the store</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatePet_Request">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>Pet object that needs to be added to the store</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByStatus200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="response" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByStatus200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="Pet" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByTags200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="response" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="findPetsByTags200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="Pet" type="schemas:Pet">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="placeOrder_Request">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>order placed for purchasing the pet</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="placeOrder200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="placeOrder200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="Order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getOrderById200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getOrderById200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="Order" type="schemas:Order">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getInventory200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="xs:integer">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getUserByName200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:User">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getUserByName200_Response1">
        <xs:sequence>
          <xs:element minOccurs="1" name="User" type="schemas:User">
            <xs:annotation>
              <xs:documentation>successful operation</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateUser_Request">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:User">
            <xs:annotation>
              <xs:documentation>Updated user object</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUsersWithArrayInput_Request">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="body" type="schemas:User">
            <xs:annotation>
              <xs:documentation>List of user object</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUsersWithListInput_Request">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="body" type="schemas:User">
            <xs:annotation>
              <xs:documentation>List of user object</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createUser_Request">
        <xs:sequence>
          <xs:element minOccurs="1" name="body" type="schemas:User">
            <xs:annotation>
              <xs:documentation>Created user object</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-format200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:GET_lists-formatResponse">
            <xs:annotation>
              <xs:documentation>Best Sellers list books</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-date-list-json200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:GET_lists-date-list-jsonResponse">
            <xs:annotation>
              <xs:documentation>Best Sellers list books.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-full-overview-format200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:OverviewResponse">
            <xs:annotation>
              <xs:documentation>Full overview of Best Sellers lists.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-overview-format200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:OverviewResponse">
            <xs:annotation>
              <xs:documentation>Overview of Best Sellers lists.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-names-format200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:GET_lists-names-formatResponse">
            <xs:annotation>
              <xs:documentation>Get Best Sellers list names.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_lists-best-sellers-history-json200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:GET_lists-best-sellers-history-jsonResponse">
            <xs:annotation>
              <xs:documentation>Best Sellers list history</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GET_reviews-format200_Response0">
        <xs:sequence>
          <xs:element minOccurs="1" name="response" type="schemas:GET_reviews-formatResponse">
            <xs:annotation>
              <xs:documentation>Book reviews.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </grammars>
  <resources base="https://api.nytimes.com/svc/books/v3">
    <resource id="_petpetId" path="/pet/{petId}">
      <param name="petId" style="template" type="xsd:long" default="" required="true">
        <doc title="petId" xml:lang="en">ID of pet to return</doc>
      </param>
      <param name="petId" style="template" type="xsd:long" default="" required="true">
        <doc title="petId" xml:lang="en">ID of pet that needs to be updated</doc>
      </param>
      <param name="petId" style="template" type="xsd:long" default="" required="true">
        <doc title="petId" xml:lang="en">Pet id to delete</doc>
      </param>
      <method id="getPetById" name="GET">
        <doc title="getPetById" xml:lang="en">Returns a single pet</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getPetById200_Response0" mediaType="application/json" />
          <representation element="schemas:getPetById200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Pet not found</doc>
        </response>
      </method>
      <method id="updatePetWithForm" name="POST">
        <doc title="updatePetWithForm" xml:lang="en">Updates a pet in the store with form data</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/x-www-form-urlencoded" required="true" fixed="application/x-www-form-urlencoded">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation mediaType="application/x-www-form-urlencoded">
            <param name="name" style="query" type="xsd:string" default="">
              <doc title="name" xml:lang="en">Updated name of the pet</doc>
            </param>
            <param name="status" style="query" type="xsd:string" default="">
              <doc title="status" xml:lang="en">Updated status of the pet</doc>
            </param>
          </representation>
        </request>
        <response status="405">
          <doc title="405" xml:lang="en">Invalid input</doc>
        </response>
      </method>
      <method id="deletePet" name="DELETE">
        <doc title="deletePet" xml:lang="en">Deletes a pet</doc>
        <request>
          <param name="api_key" style="header" type="xsd:string" default="">
            <doc title="api_key" xml:lang="en" />
          </param>
        </request>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Pet not found</doc>
        </response>
      </method>
    </resource>
    <resource id="_petpetIduploadImage" path="/pet/{petId}/uploadImage">
      <param name="petId" style="template" type="xsd:long" default="" required="true">
        <doc title="petId" xml:lang="en">ID of pet to update</doc>
      </param>
      <method id="uploadFile" name="POST">
        <doc title="uploadFile" xml:lang="en">uploads an image</doc>
        <request>
          <representation mediaType="multipart/form-data">
            <param name="additionalMetadata" style="query" type="xsd:string" default="">
              <doc title="additionalMetadata" xml:lang="en">Additional data to pass to server</doc>
            </param>
            <param name="file" style="query" type="xsd:hexBinary" default="">
              <doc title="file" xml:lang="en">file to upload</doc>
            </param>
          </representation>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:uploadFile200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_pet" path="/pet">
      <method id="addPet" name="POST">
        <doc title="addPet" xml:lang="en">Add a new pet to the store</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:addPet_Request" mediaType="application/json" />
        </request>
        <response status="405">
          <doc title="405" xml:lang="en">Invalid input</doc>
        </response>
      </method>
      <method id="updatePet" name="PUT">
        <doc title="updatePet" xml:lang="en">Update an existing pet</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:updatePet_Request" mediaType="application/json" />
        </request>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Pet not found</doc>
        </response>
        <response status="405">
          <doc title="405" xml:lang="en">Validation exception</doc>
        </response>
      </method>
    </resource>
    <resource id="_petfindByStatus" path="/pet/findByStatus">
      <method id="findPetsByStatus" name="GET">
        <doc title="findPetsByStatus" xml:lang="en">Multiple status values can be provided with comma separated strings</doc>
        <request>
          <param name="status" style="query" default="" required="true" repeating="true">
            <doc title="status" xml:lang="en">Status values that need to be considered for filter</doc>
            <option value="available">
              <doc title="available" xml:lang="en" />
            </option>
            <option value="pending">
              <doc title="pending" xml:lang="en" />
            </option>
            <option value="sold">
              <doc title="sold" xml:lang="en" />
            </option>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:findPetsByStatus200_Response0" mediaType="application/json" />
          <representation element="schemas:findPetsByStatus200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid status value</doc>
        </response>
      </method>
    </resource>
    <resource id="_petfindByTags" path="/pet/findByTags">
      <method id="findPetsByTags" name="GET">
        <doc title="findPetsByTags" xml:lang="en">Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</doc>
        <request>
          <param name="tags" style="query" type="xsd:string" default="" required="true" repeating="true">
            <doc title="tags" xml:lang="en">Tags to filter by</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:findPetsByTags200_Response0" mediaType="application/json" />
          <representation element="schemas:findPetsByTags200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid tag value</doc>
        </response>
      </method>
    </resource>
    <resource id="_storeorder" path="/store/order">
      <method id="placeOrder" name="POST">
        <doc title="placeOrder" xml:lang="en">Place an order for a pet</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:placeOrder_Request" mediaType="application/json" />
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:placeOrder200_Response0" mediaType="application/json" />
          <representation element="schemas:placeOrder200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid Order</doc>
        </response>
      </method>
    </resource>
    <resource id="_storeorderorderId" path="/store/order/{orderId}">
      <param name="orderId" style="template" type="xsd:long" default="" required="true">
        <doc title="orderId" xml:lang="en">ID of pet that needs to be fetched</doc>
      </param>
      <param name="orderId" style="template" type="xsd:long" default="" required="true">
        <doc title="orderId" xml:lang="en">ID of the order that needs to be deleted</doc>
      </param>
      <method id="getOrderById" name="GET">
        <doc title="getOrderById" xml:lang="en">For valid response try integer IDs with value &gt;= 1 and &lt;= 10. Other values will generated exceptions</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getOrderById200_Response0" mediaType="application/json" />
          <representation element="schemas:getOrderById200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Order not found</doc>
        </response>
      </method>
      <method id="deleteOrder" name="DELETE">
        <doc title="deleteOrder" xml:lang="en">For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors</doc>
        <request />
        <response status="400">
          <doc title="400" xml:lang="en">Invalid ID supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">Order not found</doc>
        </response>
      </method>
    </resource>
    <resource id="_storeinventory" path="/store/inventory">
      <method id="getInventory" name="GET">
        <doc title="getInventory" xml:lang="en">Returns a map of status codes to quantities</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getInventory200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_userusername" path="/user/{username}">
      <param name="username" style="template" type="xsd:string" default="" required="true">
        <doc title="username" xml:lang="en">The name that needs to be fetched. Use user1 for testing.</doc>
      </param>
      <param name="username" style="template" type="xsd:string" default="" required="true">
        <doc title="username" xml:lang="en">name that need to be updated</doc>
      </param>
      <param name="username" style="template" type="xsd:string" default="" required="true">
        <doc title="username" xml:lang="en">The name that needs to be deleted</doc>
      </param>
      <method id="getUserByName" name="GET">
        <doc title="getUserByName" xml:lang="en">Get user by user name</doc>
        <request />
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <representation element="schemas:getUserByName200_Response0" mediaType="application/json" />
          <representation element="schemas:getUserByName200_Response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid username supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">User not found</doc>
        </response>
      </method>
      <method id="updateUser" name="PUT">
        <doc title="updateUser" xml:lang="en">This can only be done by the logged in user.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:updateUser_Request" mediaType="application/json" />
        </request>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid user supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">User not found</doc>
        </response>
      </method>
      <method id="deleteUser" name="DELETE">
        <doc title="deleteUser" xml:lang="en">This can only be done by the logged in user.</doc>
        <request />
        <response status="400">
          <doc title="400" xml:lang="en">Invalid username supplied</doc>
        </response>
        <response status="404">
          <doc title="404" xml:lang="en">User not found</doc>
        </response>
      </method>
    </resource>
    <resource id="_userlogin" path="/user/login">
      <method id="loginUser" name="GET">
        <doc title="loginUser" xml:lang="en">Logs user into the system</doc>
        <request>
          <param name="username" style="query" type="xsd:string" default="" required="true">
            <doc title="username" xml:lang="en">The user name for login</doc>
          </param>
          <param name="password" style="query" type="xsd:string" default="" required="true">
            <doc title="password" xml:lang="en">The password for login in clear text</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">successful operation</doc>
          <param name="X-Expires-After" style="plain" type="xsd:string" required="true">
            <doc title="X-Expires-After" xml:lang="en">date in UTC when token expires</doc>
          </param>
          <param name="X-Rate-Limit" style="plain" type="xsd:string" required="true">
            <doc title="X-Rate-Limit" xml:lang="en">calls per hour allowed by the user</doc>
          </param>
          <representation element="schemas:response" mediaType="application/json" />
          <representation element="schemas:response1" mediaType="application/xml" />
        </response>
        <response status="400">
          <doc title="400" xml:lang="en">Invalid username/password supplied</doc>
        </response>
      </method>
    </resource>
    <resource id="_userlogout" path="/user/logout">
      <method id="logoutUser" name="GET">
        <doc title="logoutUser" xml:lang="en">Logs out current logged in user session</doc>
        <request />
        <response status="0">
          <doc title="0" xml:lang="en">successful operation</doc>
        </response>
      </method>
    </resource>
    <resource id="_usercreateWithArray" path="/user/createWithArray">
      <method id="createUsersWithArrayInput" name="POST">
        <doc title="createUsersWithArrayInput" xml:lang="en">Creates list of users with given input array</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:createUsersWithArrayInput_Request" mediaType="application/json" />
        </request>
        <response status="0">
          <doc title="0" xml:lang="en">successful operation</doc>
        </response>
      </method>
    </resource>
    <resource id="_usercreateWithList" path="/user/createWithList">
      <method id="createUsersWithListInput" name="POST">
        <doc title="createUsersWithListInput" xml:lang="en">Creates list of users with given input array</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:createUsersWithListInput_Request" mediaType="application/json" />
        </request>
        <response status="0">
          <doc title="0" xml:lang="en">successful operation</doc>
        </response>
      </method>
    </resource>
    <resource id="_user" path="/user">
      <method id="createUser" name="POST">
        <doc title="createUser" xml:lang="en">This can only be done by the logged in user.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <representation element="schemas:createUser_Request" mediaType="application/json" />
        </request>
        <response status="0">
          <doc title="0" xml:lang="en">successful operation</doc>
        </response>
      </method>
    </resource>
    <resource id="_lists.json" path="/lists.json">
      <method id="GET_lists-format" name="GET">
        <doc title="GET_lists-format" xml:lang="en">Get Best Sellers list.  If no date is provided returns the latest list.</doc>
        <request>
          <param name="list" style="query" type="xsd:string" default="hardcover-fiction" required="true">
            <doc title="list" xml:lang="en">The name of the Times best sellers list (hardcover-fiction, paperback-nonfiction, ...).
The /lists/names service returns all the list names.
The encoded list names are lower case with hyphens instead of spaces (e.g. e-book-fiction, instead of E-Book Fiction).</doc>
          </param>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <param name="bestsellers-date" style="query" type="xsd:string" default="">
            <doc title="bestsellers-date" xml:lang="en">YYYY-MM-DD

The week-ending date for the sales reflected on list-name. Times best sellers lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).</doc>
          </param>
          <param name="published-date" style="query" type="xsd:string" default="">
            <doc title="published-date" xml:lang="en">YYYY-MM-DD

The date the best sellers list was published on NYTimes.com (different than bestsellers-date).  Use "current" for latest list.</doc>
          </param>
          <param name="offset" style="query" type="xsd:integer" default="">
            <doc title="offset" xml:lang="en">Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Best Sellers list books</doc>
          <representation element="schemas:GET_lists-format200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_listsdatelist.json" path="/lists/{date}/{list}.json">
      <param name="date" style="template" type="xsd:string" default="" required="true">
        <doc title="date" xml:lang="en">YYYY-MM-DD or "current"

The date the best sellers list was published on NYTimes.com.  Use "current" to get latest list.</doc>
      </param>
      <param name="list" style="template" type="xsd:string" default="" required="true">
        <doc title="list" xml:lang="en">Name of the Best Sellers List (e.g. hardcover-fiction). You can get the full list of names from the /lists/names.json service.</doc>
      </param>
      <method id="GET_lists-date-list-json" name="GET">
        <doc title="GET_lists-date-list-json" xml:lang="en">Get Best Sellers list by date.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <param name="offset" style="query" type="xsd:integer" default="">
            <doc title="offset" xml:lang="en">Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Best Sellers list books.</doc>
          <representation element="schemas:GET_lists-date-list-json200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_listsfull-overview.json" path="/lists/full-overview.json">
      <method id="GET_lists-full-overview-format" name="GET">
        <doc title="GET_lists-full-overview-format" xml:lang="en">Get all books for all the Best Sellers lists for specified date.</doc>
        <request>
          <param name="published_date" style="query" type="xsd:string" default="">
            <doc title="published_date" xml:lang="en">YYYY-MM-DD

The best-seller list publication date.
You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.

If you do not include a published date, the current week's best sellers lists will be returned.</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Full overview of Best Sellers lists.</doc>
          <representation element="schemas:GET_lists-full-overview-format200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_listsoverview.json" path="/lists/overview.json">
      <method id="GET_lists-overview-format" name="GET">
        <doc title="GET_lists-overview-format" xml:lang="en">Get top 5 books for all the Best Sellers lists for specified date.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <param name="published_date" style="query" type="xsd:string" default="">
            <doc title="published_date" xml:lang="en">YYYY-MM-DD

The best-seller list publication date.
You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.

If you do not include a published date, the current week's best sellers lists will be returned.</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Overview of Best Sellers lists.</doc>
          <representation element="schemas:GET_lists-overview-format200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_listsnames.json" path="/lists/names.json">
      <method id="GET_lists-names-format" name="GET">
        <doc title="GET_lists-names-format" xml:lang="en">Get Best Sellers list names.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Get Best Sellers list names.</doc>
          <representation element="schemas:GET_lists-names-format200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_listsbest-sellershistory.json" path="/lists/best-sellers/history.json">
      <method id="GET_lists-best-sellers-history-json" name="GET">
        <doc title="GET_lists-best-sellers-history-json" xml:lang="en">Get Best Sellers list history.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <param name="age-group" style="query" type="xsd:string" default="">
            <doc title="age-group" xml:lang="en">The target age group for the best seller.</doc>
          </param>
          <param name="author" style="query" type="xsd:string" default="">
            <doc title="author" xml:lang="en">The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).

When searching the author field, you can specify any combination of first, middle and last names.

When sort-by is set to author, the results will be sorted by author's first name.</doc>
          </param>
          <param name="contributor" style="query" type="xsd:string" default="">
            <doc title="contributor" xml:lang="en">The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).

When searching, you can specify any combination of first, middle and last names of any of the contributors.

When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.</doc>
          </param>
          <param name="isbn" style="query" type="xsd:string" default="">
            <doc title="isbn" xml:lang="en">International Standard Book Number, 10 or 13 digits

A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229).</doc>
          </param>
          <param name="offset" style="query" type="xsd:integer" default="">
            <doc title="offset" xml:lang="en">Sets the starting point of the result set (0, 20, ...).  Used to paginate thru results if there are more than 20. Defaults to 0. The num_results field indicates how many results there are total.</doc>
          </param>
          <param name="price" style="query" type="xsd:string" default="">
            <doc title="price" xml:lang="en">The publisher's list price of the best seller, including decimal point.</doc>
          </param>
          <param name="publisher" style="query" type="xsd:string" default="">
            <doc title="publisher" xml:lang="en">The standardized name of the publisher</doc>
          </param>
          <param name="title" style="query" type="xsd:string" default="">
            <doc title="title" xml:lang="en">The title of the best seller

When searching, you can specify a portion of a title or a full title.</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Best Sellers list history</doc>
          <representation element="schemas:GET_lists-best-sellers-history-json200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
    <resource id="_reviews.json" path="/reviews.json">
      <method id="GET_reviews-format" name="GET">
        <doc title="GET_reviews-format" xml:lang="en">Get book reviews.</doc>
        <request>
          <param name="Content-Type" style="header" type="xsd:string" default="application/json" required="true" fixed="application/json">
            <doc title="Content-Type" xml:lang="en" />
          </param>
          <param name="isbn" style="query" type="xsd:integer" default="">
            <doc title="isbn" xml:lang="en">Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs.</doc>
          </param>
          <param name="title" style="query" type="xsd:string" default="">
            <doc title="title" xml:lang="en">You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20.</doc>
          </param>
          <param name="author" style="query" type="xsd:string" default="">
            <doc title="author" xml:lang="en">You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20.</doc>
          </param>
        </request>
        <response status="200">
          <doc title="200" xml:lang="en">Book reviews.</doc>
          <representation element="schemas:GET_reviews-format200_Response0" mediaType="application/json" />
        </response>
      </method>
    </resource>
  </resources>
</application>